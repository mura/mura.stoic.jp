---
layout: single
title: sprintf
date: 2005-11-26 01:17:45.000000000 +09:00
type: post
tags: []
permalink: "/2005/11/sprintf_1/"
---
カウンタがうまく回ってなかった。。。<br />
さて、C言語で文字列のコピーしたいとき、しかも`std::string`じゃなくて`char*`で。<br />
これが悩むんだけど、標準ライブラリを使おうとすると<br />

- strcpy
- strncpy
- sprintf/snprintf

この3つになる。<br />
けど、この3つが結構くせ者なのね。

まず、`strcpy`。たぶん一番単純。
```c
char *strcpy(char *dest, const char *src);
```
srcからdestに文字列をコピーするだけなんだけど、srcがdestより大きい場合ってのが問題。
普通にそのままコピーするからdestの範囲じゃないところまで書き込んじゃう。<br />
いわゆるバッファオーバーフロー。<br />
だから、サイズチェックは必須になる。忘れやすいから使わない方がいい。<br />

次に、`strncpy`。ちょっとましになった版。
```c
char *strncpy(char *dest, const char *src, size_t n);
```
さっきの`strcpy`にサイズを示すnが入っていて、一応上のバグはつぶされてる。<br />
けど、この関数に仕様が微妙で

- nを超える文字数がコピーされることはない。
- src の長さが n よりも少ない場合は、 dest の残りは NUL 文字で埋められる。
- srcがｎよりも大きい場合、終端文字(NULL)文字は**挿入しない**

ということでsrcがn文字より大きかった場合、終わりがない文字列に成っちゃうのね。<br />
だから
```c
strncpy(dest, src, sizeof(dest)-1);
```
とかで確実に終端文字が入るようにしないといけない。<br />
まあ、これはこれでsrcの長さがnより小さかったらNULを入れる処理が入るから、
長いバッファを使ったときにパフォーマンスがわるくなっちゃう。

最後に`sprintf`。
```c
int sprintf(char *str, const char *format, ...);
```
けど、これは`strcpy`と同じ問題を抱えてるからこっちを使おう。
```c
int snprintf(char *str, size_t size, const char *format, ...);
```
`printf`みたくフォーマット指定で文字列を書き込める関数。<br />
フォーマット指定の仕方できっちりした文字列コピーが可能。
```c
sprintf(buf, "%.*s", sizeof(buf)-1, "long-string");
```
ここでポイントが `%.*s` と精度指定すること。
そうしないと`%*s`だけだとコピー元の長さによってフォーマットが長くなってしまう。

とこんなことをいろいろ調べて今日も帰りが遅くなってしまった。。。
